trigger:
  branches:
    include:
      - main

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'  # Build configuration
  azureSubscription: 'testappserviceconnection'  # Azure service connection name
  webAppName: 'TestAppWebApp'  # Azure Web App name
  resourceGroupName: 'TestAppResourceGroup'  # Azure resource group name

stages:
# Stage 1: Build and Code Analysis
- stage: BuildAndAnalyze
  displayName: 'Build and Code Analysis'
  jobs:
  - job: BuildAndCodeQLJob
    displayName: 'Build and Analyze Source Code'
    steps:
    # Step 1: Checkout Code from GitHub
    - task: Checkout@1
      displayName: 'Checkout GitHub Repository'
      inputs:
        repository: self

    # Step 2: Install .NET Core SDK
    - task: UseDotNet@2
      displayName: 'Install .NET Core SDK'
      inputs:
        packageType: 'sdk'
        version: '8.0.100'

    # Step 3: Build the Application
    - script: |
        echo "Building TestApp"
        dotnet build $(Build.SourcesDirectory)/TestApp.sln --configuration $(buildConfiguration)
      displayName: 'Build Application'

    # Step 4: Run GitHub Advanced Security (CodeQL) Analysis
    - task: AdvancedSecurity-Codeql-Init@1
      displayName: 'Initialize CodeQL'
      inputs:
        languages: 'csharp'
        buildCommands: "dotnet build $(Build.SourcesDirectory)/TestApp.sln --configuration $(buildConfiguration)"
        enableAutomaticCodeQLInstall: true

    - task: AdvancedSecurity-Codeql-Analyze@1
      displayName: 'Run CodeQL Analysis'

# Stage 2: Deploy to Azure Web App
- stage: Deploy
  displayName: 'Deploy to Azure Web App'
  dependsOn: BuildAndAnalyze
  condition: succeeded()  # Only run if BuildAndAnalyze succeeded
  jobs:
  - job: DeployJob
    displayName: 'Deploy Application to Azure Web App'
    steps:
    # Step 1: Publish Build Artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        pathToPublish: $(Build.SourcesDirectory)/bin/$(buildConfiguration)/netcoreapp3.1/publish
        artifactName: 'drop'

    # Step 2: Deploy to Azure Web App
    - task: AzureWebApp@1
      displayName: 'Deploy to Azure Web App'
      inputs:
        azureSubscription: $(azureSubscription)
        appType: 'webApp'
        appName: $(webAppName)
        resourceGroupName: $(resourceGroupName)
        package: '$(Pipeline.Workspace)/drop/*.zip'
